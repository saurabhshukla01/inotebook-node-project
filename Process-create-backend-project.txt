Required Applications >>>
####################################################
# Node Install  ( for dependency )
# mongodb compass  ( database )
# express
# mongoose
# nodemon
# run server command >>>  
node index.js or node server.js  ( which is your main file in node project you set initizle )
if you have nodemon  ( its run automatically or getting error its break if any thing is right then run server automatically ).
nodemon index.js or nodemon server.js 
####################################################

first create react project in mern >>

# npx create-react-app inotebook

+++++++++++++++++++++++++++++++++++++++

goto dir >>

cd inotebook

+++++++++++++++++++++++++++++++++++++++

create another project backend folder >>>

# cd backend

run some command >>>  npm init

# ask some question >>  given some reply 

Press ^C at any time to quit.
package name: (backend) inotebook-backend
version: (1.0.0)
description: your notebook on the cloud
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)

after enter >>>>

About to write to C:\React-learning\inotebook\backend\package.json:

{
  "name": "inotebook-backend",
  "version": "1.0.0",
  "description": "your notebook on the cloud",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this OK? (yes) yes

complete initizle ...

if you intizle this file its create package.json file ..

+++++++++++++++++++++++++++++++++++++++

after package install then we can use or install apps according to you need ..

you can check mongoose docs >>>

links >> https://mongoosejs.com/docs/


install express via npm  >>>

# npm i express

# npm i mongoose

create index.js file inside backend folder >>>

# npm i nodemon

its working automatically server to launch ..

+++++++++++++++++++++++++++++++++++++++++++++++++

create stucture etc ..

controller , middlewares , routes folders & db.js file etc.

+++++++++++++++++++++++++++++

db.js file >>>>

// mongoConnect.js  Or db.js
const mongoose = require('mongoose');
const mongoURI = "mongodb://localhost:27017/inotebook";

const connectToMongo = async () => {
    try {
        await mongoose.connect(mongoURI, {});
        console.log('Connected to MongoDB');
    } catch (error) {
        console.error('Error connecting to MongoDB:', error);
    }
};

module.exports = connectToMongo;



++++++++++++++++++++++++++++++++++++

inside router folder create two file auth & notes  >>>

like for ex >>  auth.js

const express = require('express');
const router = express.Router();

router.get('/',(req,res) => {
    obj = {
        a:"this",
        number:34
    }
    res.json(obj);
})
module.exports = router


++++++++++++++++++++++++++++++++++++++++++++

if you want to check res.body while send via postman then you see in console then 

write some code >>>>

index.js file >>>

app.use(express.json());

full code in index.js file >>>

const connectToMongo = require('./db');
const express = require('express');

connectToMongo();
const app = express();
const port = 4000;

app.use(express.json());

app.get('/',(req,res) => {
    res.send("<b>Hello Saurabh Shukla Welcome in my node Js project .. !!</b>")
})
// Available Routes
app.use('/api/auth',require('./routes/authentication'));
app.use('/api/notes',require('./routes/notes'));

app.listen(port, () => {
    console.log(`Example app listening at http://localhost:${port}`)
})



now its working ..

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

create models inside user.js >>>

const mongoose = require('mongoose');
const {Schema} = mongoose;

const UserSchema = new Schema({
    name:{
        type: String,
        required: true
    },
    email:{
        type: String,
        required: true,
        unique: true
    },
    password:{
        type: String,
        required: true
    },
    date:{
        type: Date,
        default: Date.now
    },
});

module.exports = mongoose.model('user' , UserSchema);

+++++++++++++++++++++++++++++++++++++++++++++++++++++=

authentication.js >>>

const express = require('express');
const User = require('../models/User'); 
const router = express.Router();


// Create a User using: POST "/api/auth/" .Doesn't require Auth
router.post('/',(req,res) => {
    console.log(req.body);
    const user = User(req.body);
    user.save();
    res.send(req.body);
});

module.exports = router



++++++++++++++++++++++++++++++++++++++++++

# url :  https://express-validator.github.io/docs/
# video url : https://www.youtube.com/watch?v=N4GHLaCSXUg&list=PLu0W_9lII9agx66oZnT6IyhcMIbUMNMdt&index=47

now need to check validation then use express validator >>>>

so install package >>>

# npm install --save express-validator

+++++++++++++++++++++++++++++++++++++++++++

update some code >>>

authentication.js >>>

import this line >>

const { query, validationResult } = require('express-validator');

update code >>

const express = require('express');
const User = require('../models/User'); 
const { body, validationResult } = require('express-validator');
const router = express.Router();


// Create a User using: POST "/api/auth/" .Doesn't require Auth
router.post('/', [
    body('name','Enter a valid name').isLength({min:3}),
    body('email','Enter a valid email').isEmail(),
    body('password','Password must be at least 5 characters').isLength({min:5}),
] , (req,res) => {
    const errors = validationResult(req); 
    if(!errors.isEmpty()){
        return res.status(400).json({ errors:errors.array() });
    }
    User.create({
        name:req.body.name,
        email:req.body.email,
        password:req.body.password,
    }).then(user => res.json(user));
});

module.exports = router

now its working ...

+++++++++++++++++++++++++++++++++++++++++++++++++++++

now need to we need to fix unique email store in db >>

create index in model Schema update some code in User.js file >>

const User = mongoose.model('user' , UserSchema);
User.createIndexes();  // its create all indexes use this code ..
module.exports = User;

++++++++++++++++++++++++++++++++++++++++++++++++++++++

update some code in authentication.js file to show error what is comming >>>

update some code while create user >>>

	User.create({
		name:req.body.name,
			email:req.body.email,
			password:req.body.password,
		}).then(user => res.json(user))
		.catch(err=> {console.log(err)
			res.json({error:"Please enter a unique value for email", message:err.message})
	});
	
use res.json error get message which you get , and custom message also get..
	
add catch session & error show which you got ..

++++++++++++++++++++++++++++++++++++++++++++++++++++++

update authentication.js file >>

const express = require('express');
const User = require('../models/User'); 
const { body, validationResult } = require('express-validator');
const router = express.Router();


// Create a User using: POST "/api/auth/create-user" .No login required ( Doesn't require Auth )
router.post('/create-user', [
    body('name','Enter a valid name').isLength({min:3}),
    body('email','Enter a valid email').isEmail(),
    body('password','Password must be at least 5 characters').isLength({min:5}),
] , async (req,res) => {
    // if there are errors, return Bad request and the errors
    const errors = validationResult(req); 
    if(!errors.isEmpty()){
        return res.status(400).json({ errors:errors.array() });
    }
    // check weather the user with this email exists already
    try{
        let user = await User.findOne({email:req.body.email})  // its promise so use await to resolve the value or output
        if(user){
            return res.status(400).json({error:"Sorry a user with this email already exists."})
        }
        // create a new user
        user = await User.create({
            name:req.body.name,
            email:req.body.email,
            password:req.body.password,
        })
        res.json(user);
        // catch errors
    }catch (error) {
        console.error(error.message);
        res.status(500).send("Some error occurred")
    }

});

module.exports = router

+++++++++++++++++++++++++++++++++++++++++++++++++++

Understanding Password Hashing, Salt & Pepper in NodeJs >>>

for this install one package >>>

# npm install bcryptjs   ( this is bcryptjs package for using password secuirty )



update code in authentication file >>>

import one line for package >>>

const bcrypt = require('bcryptjs');

// creating salt using function to secure the password ..
const salt = await bcrypt.genSalt(10);
// change password variable in hashing , salt , pepper  etc 
secPass = await bcrypt.hash(req.body.password,salt);
// create a new user
user = await User.create({
name:req.body.name,
email:req.body.email,
password:secPass,
})

+++++++++++++++++++++++++++++++++++++++++++++++++++++
	
when user logged in or login then send token its based on like that >>

# JWT NodeJs
# Session Token 

now we are use JWT NodeJs ( Json web token )

-------------------------------------------------------

Install package >>>  

# npm i jsonwebtoken

for more knowledge link is >>   https://jwt.io/

check with this code >>>

import some lines >>>

const jwt = require('jsonwebtoken');
const JWT_SECRET = 'forAuthenticationUserLoggedIn';

const data = {
    user : {
        id : user.id
        }
    }
const authToken = jwt.sign(data,JWT_SECRET);  // this is sync method not call to async Or await function 
// console.log(authToken);
res.json({authToken});  // after user create send auth token in api while create user successfully.



++++++++++++++++++++++++++++++++++++++++++++

update file based on git code ( login & get user details )..

get User details based on logged in user >>>

---------------------------------------------------------

need to create middlewares  in node Js >>>

Creating a middleware to decode user from a JWT  >>>>

middlewares/fetchUser.js >>

const jwt = require('jsonwebtoken');
const JWT_SECRET = 'forAuthenticationUserLoggedIn';

const fetchUser = (req, res, next) => {
    // Get the user from the jwt token and add id to request object
    const token = req.header('auth-token');
    if(!token){
        res.status(401).send({error:"Please authenticate using a valid token"});
    }
    try{
        const data = jwt.verify(token,JWT_SECRET);
        req.user = data.user;
        next();
    }catch(error){
        console.error(error.message);
        res.status(401).send({error:"Please authenticate using a valid token"});
    }
} 
module.exports = fetchUser;


---------------------------------------------------------


authentication.js update code >>>

// ROUTE 3: Get LoggedIn User Details using: POST "/api/auth/get-user" .Login required ( Does require Auth )
router.post('/get-user', 
    fetchUser,
    async (req,res) => {
        try{
            userId = req.user.id;
            const user = await User.findById(userId).select("-password");    // "-password"  means ignore password fetch all fields
            // send user response in api while get correct header "auth-token"
            res.send(user);
        // catch errors
        }catch (error) {
            console.error(error.message);
            res.status(500).send("Internal Server Error")
        }
    }
);

now pass in api via postman in get-user
send auth-token in header while hit the request ( before logged in and get the auth-token and pass 
in the get-user request so its send the data which user is logged in.

		
++++++++++++++++++++++++++++++++++++++++++++++++++++++

update notes.js page >>>

const express = require('express');
const Notes = require('../models/Notes'); 
const { body, validationResult } = require('express-validator');
const router = express.Router();
var fetchUser = require('../middlewares/fetchUser');


// ROUTE 1: Get All the notes using: GET "/api/notes/fetch-all-notes" .Login required ( Does require Auth )
router.get('/fetch-all-notes',
    fetchUser,
    async (req,res) => {
        try{
            // get all notes based on user id which user is logged in
            const notes = await Notes.find({user:req.user.id});
            res.json(notes);
        }catch(error){
            console.error(error.message);
            res.status(500).send("Internal Server Error")
        }
    }
);


// ROUTE 2: create a notes using: POST "/api/notes/create-notes" .Login required ( Does require Auth )
router.post('/create-notes',
    fetchUser,
    [
        body('title','Enter a valid title').isLength({min:3}),
        body('description','Description must be at least 5 characters').isLength({min:5}),
    ],
    async (req,res) => {
        try{
            // destructure the variable based on req body 
            const {title , description , tag} = req.body;
            // if there are errors, return Bad request and the errors
            const errors = validationResult(req); 
            if(!errors.isEmpty()){
                return res.status(400).json({ errors:errors.array() });
            }
            // create notes based on user id which user is logged in
            const notes = new Notes({
                title , description , tag , user : req.user.id
            })
            const savedNote = await notes.save();  // async & await function its send promise to resolve this 
            res.json(savedNote);
        }catch(error){
            console.error(error.message);
            res.status(500).send("Internal Server Error")
        }
    }
);


// ROUTE 3: update a notes using: PUT "/api/notes/update-notes" .Login required ( Does require Auth )
router.put('/update-notes/:id',
    fetchUser,
    async (req,res) => {
        try{
            // destructure the variable based on req body 
            const {title , description , tag} = req.body;
            // create a newNote object
            const newNote = {};
            if(title){newNote.title = title};
            if(description){newNote.description = description};
            if(tag){newNote.tag = tag};
            // find the note to be updated and update it
            let note = await Notes.findById(req.params.id)
            if(!note){
                res.status(404).send("Not Found");
            }
            // check user is exists which want to update notes
            if(note.user.toString() !== req.user.id){
                res.status(401).send("Not Allowed");
            }
            // want to update if any thing is correct
            note = await Notes.findByIdAndUpdate(req.params.id,{$set:newNote},{new:true});
            res.json(note);
        }catch(error){
            console.error(error.message);
            res.status(500).send("Internal Server Error")
        }
    }
);

// ROUTE 4: delete a notes using: DELETE "/api/notes/delete-notes" .Login required ( Does require Auth )
router.delete('/delete-notes/:id',
    fetchUser,
    async (req,res) => {
        try{
            // find the note to be deleted and delete it
            let note = await Notes.findById(req.params.id)
            console.log(note);
            if(!note){
                res.status(404).send("Not Found");
            }
            // Allow deletion only if user owns this Note
            if(note.user.toString() !== req.user.id){
                res.status(401).send("Not Allowed");
            }
            // want to update if any thing is correct
            note = await Notes.findByIdAndDelete(req.params.id);
            res.json({"Success":"Notes has been deleted",note:note});
        }catch(error){
            console.error(error.message);
            res.status(500).send("Internal Server Error")
        }
    }
);

module.exports = router



+++++++++++++++++++++++++++++++++++++++++++++++

update authentication.js page >>>>

const express = require('express');
const User = require('../models/User'); 
const { body, validationResult } = require('express-validator');
const router = express.Router();
const bcrypt = require('bcryptjs');
var jwt = require('jsonwebtoken');
var fetchUser = require('../middlewares/fetchUser');
const JWT_SECRET = 'forAuthenticationUserLoggedIn';


// ROUTE 1: Create a User using: POST "/api/auth/create-user" .No login required ( Doesn't require Auth )
router.post('/create-user', [
    body('name','Enter a valid name').isLength({min:3}),
    body('email','Enter a valid email').isEmail(),
    body('password','Password must be at least 5 characters').isLength({min:5}),
] , async (req,res) => {
    // if there are errors, return Bad request and the errors
    const errors = validationResult(req); 
    if(!errors.isEmpty()){
        return res.status(400).json({ errors:errors.array() });
    }
    // check weather the user with this email exists already
    try{
        let user = await User.findOne({email:req.body.email})  // its promise so use await to resolve the value or output
        if(user){
            return res.status(400).json({error:"Sorry a user with this email already exists."})
        }
        // creating salt using function to secure the password ..
        const salt = await bcrypt.genSalt(10);
        // change password variable in hashing , salt , pepper  etc 
        secPass = await bcrypt.hash(req.body.password,salt);
        // create a new user
        user = await User.create({
            name:req.body.name,
            email:req.body.email,
            password:secPass,
        })
        const data = {
            user : {
                id : user.id
            }
        }
        const authToken = jwt.sign(data,JWT_SECRET);  // this is sync method not call to async Or await function 
        // console.log(authToken);
        res.json({authToken});  // after user create send auth token in api while create user successfully.
        // catch errors
    }catch (error) {
        console.error(error.message);
        res.status(500).send("Internal Server Error")
    }
});

// ROUTE 2: Authenticate a User using: POST "/api/auth/login" .No login required ( Doesn't require Auth )
router.post('/login', [
    body('email','Enter a valid email').isEmail(),
    body("password","Password can't be blank").exists(),  // password exits or not to check this function
] , async (req,res) => {
    // if there are errors, return Bad request and the errors
    const errors = validationResult(req); 
    if(!errors.isEmpty()){
        return res.status(400).json({ errors:errors.array() });
    }
    // destructure the variables using body get value 
    const {email,password} = req.body;
    try{
        let user = await User.findOne({email})  // its promise so use await to resolve the value or output
        if(!user){
            return res.status(400).json({error:"Please try to login with correct Credentials."})
        }
        // this is compare both password user by enter & match with database user password while fetch from email which user want to login.
        const passwordCompare = await bcrypt.compare(password,user.password);  // this is async function need to call await to solve all promise
        if(!passwordCompare){
            return res.status(400).json({error:"Please try to login with correct Credentials."})
        }
        // if matched password with email if db has users then logged in with the response
        const data = {
            user : {
                id : user.id
            }
        }
        const authToken = jwt.sign(data,JWT_SECRET);  // this is sync method not call to async Or await function 
        res.json({authToken});  // after user logged in send auth token in api.
    // catch errors
    }catch (error) {
        console.error(error.message);
        res.status(500).send("Internal Server Error")
    }
});

// ROUTE 3: Get LoggedIn User Details using: POST "/api/auth/get-user" .Login required ( Does require Auth )
router.post('/get-user', 
    fetchUser,
    async (req,res) => {
        try{
            userId = req.user.id;
            const user = await User.findById(userId).select("-password");    // "-password"  means ignore password fetch all fields
            // send user response in api while get correct header "auth-token"
            res.send(user);
        // catch errors
        }catch (error) {
            console.error(error.message);
            res.status(500).send("Internal Server Error")
        }
    }
);

module.exports = router

++++++++++++++++++++++++++++++++++++++++++

How to fix cors in express node  >>

# npm install cors





