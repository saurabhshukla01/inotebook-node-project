first create react project in mern >>

# npx create-react-app inotebook

+++++++++++++++++++++++++++++++++++++++

goto dir >>

cd inotebook

+++++++++++++++++++++++++++++++++++++++

create another project backend folder >>>

# cd backend

run some command >>>  npm init

# ask some question >>  given some reply 

Press ^C at any time to quit.
package name: (backend) inotebook-backend
version: (1.0.0)
description: your notebook on the cloud
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)

after enter >>>>

About to write to C:\React-learning\inotebook\backend\package.json:

{
  "name": "inotebook-backend",
  "version": "1.0.0",
  "description": "your notebook on the cloud",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this OK? (yes) yes

complete initizle ...

if you intizle this file its create package.json file ..

+++++++++++++++++++++++++++++++++++++++

after package install then we can use or install apps according to you need ..

you can check mongoose docs >>>

links >> https://mongoosejs.com/docs/


install express via npm  >>>

# npm i express

# npm i mongoose

create index.js file inside backend folder >>>

# npm i nodemon

its working automatically server to launch ..

+++++++++++++++++++++++++++++++++++++++++++++++++

create stucture etc ..

controller , middlewares , routes folders & db.js file etc.

+++++++++++++++++++++++++++++

db.js file >>>>

// mongoConnect.js  Or db.js
const mongoose = require('mongoose');
const mongoURI = "mongodb://localhost:27017/inotebook";

const connectToMongo = async () => {
    try {
        await mongoose.connect(mongoURI, {});
        console.log('Connected to MongoDB');
    } catch (error) {
        console.error('Error connecting to MongoDB:', error);
    }
};

module.exports = connectToMongo;



++++++++++++++++++++++++++++++++++++

inside router folder create two file auth & notes  >>>

like for ex >>  auth.js

const express = require('express');
const router = express.Router();

router.get('/',(req,res) => {
    obj = {
        a:"this",
        number:34
    }
    res.json(obj);
})
module.exports = router


++++++++++++++++++++++++++++++++++++++++++++

if you want to check res.body while send via postman then you see in console then 

write some code >>>>

index.js file >>>

app.use(express.json());

full code in index.js file >>>

const connectToMongo = require('./db');
const express = require('express');

connectToMongo();
const app = express();
const port = 4000;

app.use(express.json());

app.get('/',(req,res) => {
    res.send("<b>Hello Saurabh Shukla Welcome in my node Js project .. !!</b>")
})
// Available Routes
app.use('/api/auth',require('./routes/authentication'));
app.use('/api/notes',require('./routes/notes'));

app.listen(port, () => {
    console.log(`Example app listening at http://localhost:${port}`)
})



now its working ..

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

create models inside user.js >>>

const mongoose = require('mongoose');
const {Schema} = mongoose;

const UserSchema = new Schema({
    name:{
        type: String,
        required: true
    },
    email:{
        type: String,
        required: true,
        unique: true
    },
    password:{
        type: String,
        required: true
    },
    date:{
        type: Date,
        default: Date.now
    },
});

module.exports = mongoose.model('user' , UserSchema);

+++++++++++++++++++++++++++++++++++++++++++++++++++++=

authentication.js >>>

const express = require('express');
const User = require('../models/User'); 
const router = express.Router();


// Create a User using: POST "/api/auth/" .Doesn't require Auth
router.post('/',(req,res) => {
    console.log(req.body);
    const user = User(req.body);
    user.save();
    res.send(req.body);
});

module.exports = router



++++++++++++++++++++++++++++++++++++++++++

# url :  https://express-validator.github.io/docs/
# video url : https://www.youtube.com/watch?v=N4GHLaCSXUg&list=PLu0W_9lII9agx66oZnT6IyhcMIbUMNMdt&index=47

now need to check validation then use express validator >>>>

so install package >>>

# npm install --save express-validator

+++++++++++++++++++++++++++++++++++++++++++

update some code >>>

authentication.js >>>

import this line >>

const { query, validationResult } = require('express-validator');

update code >>

const express = require('express');
const User = require('../models/User'); 
const { body, validationResult } = require('express-validator');
const router = express.Router();


// Create a User using: POST "/api/auth/" .Doesn't require Auth
router.post('/', [
    body('name','Enter a valid name').isLength({min:3}),
    body('email','Enter a valid email').isEmail(),
    body('password','Password must be at least 5 characters').isLength({min:5}),
] , (req,res) => {
    const errors = validationResult(req); 
    if(!errors.isEmpty()){
        return res.status(400).json({ errors:errors.array() });
    }
    User.create({
        name:req.body.name,
        email:req.body.email,
        password:req.body.password,
    }).then(user => res.json(user));
});

module.exports = router

now its working ...

+++++++++++++++++++++++++++++++++++++++++++++++++++++

now need to we need to fix unique email store in db >>

create index in model Schema update some code in User.js file >>

const User = mongoose.model('user' , UserSchema);
User.createIndexes();  // its create all indexes use this code ..
module.exports = User;

++++++++++++++++++++++++++++++++++++++++++++++++++++++

update some code in authentication.js file to show error what is comming >>>

update some code while create user >>>

	User.create({
		name:req.body.name,
			email:req.body.email,
			password:req.body.password,
		}).then(user => res.json(user))
		.catch(err=> {console.log(err)
			res.json({error:"Please enter a unique value for email", message:err.message})
	});
	
use res.json error get message which you get , and custom message also get..
	
add catch session & error show which you got ..

++++++++++++++++++++++++++++++++++++++++++++++++++++++


